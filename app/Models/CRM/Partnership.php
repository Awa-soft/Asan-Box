<?php

namespace App\Models\CRM;

use App\Models\Logistic\Branch;
use App\Traits\Core\HasUser;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\SoftDeletes;

class Partnership extends Model
{
    use HasFactory;
    use HasUser;
    use SoftDeletes;


    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::created(function ($model){
            $data = self::where('id','<',$model->id)
                ->where('branch_id',$model->branch_id)
                ->orderBy('id','desc')
                ->get()
                ->first();
            if($data){
                $data->end_date = $model->start_date;
                $data->save();
            }
        });
        self::updated(function ($model){
            $data = self::where('id','<',$model->id)
                ->where('branch_id',$model->branch_id)
                ->orderBy('id','desc')
                ->get()
                ->first();
            if($data){
                $data->end_date = $model->start_date;
                $data->save();
            }
        });
        self::deleting(function ($model){
            $data = self::where('id','<',$model->id)
                ->where('branch_id',$model->branch_id)
                ->orderBy('id','desc')
                ->get()
                ->first();
            if($data){
                $data->end_date = null;
                $data->save();
            }
        });
    }

    public function branch():BelongsTo{
        return $this->belongsTo(Branch::class);
    }
    public function partnerAccounts():HasMany
    {
        return $this->hasMany(PartnerAccount::class);
    }

    public function getNameAttribute():string{
        if($this->end_date != null){
            return $this->start_date . ' - ' . $this->end_date;
        }
        return (string)$this->start_date;
    }
    public function getStatusAttribute(){
        return $this->end_date == null?trans('lang.active'):trans('lang.deactivate');
    }
}
